#!/bin/bash

# get-tools.sh

red="\e[31m"
green="\e[32m"
yellow="\e[33m"
reset="\e[0m"

if [ ${EUID} -ne 0 ]; then
    echo -e "Please, execute this script with ${red}root${reset}..." 
    echo "Because this script install packages with package manager"
    echo "from your distro and configure some tools files in /etc!"
    echo "If you'll use sudo, please run it with -H option 'cause some pip installation!"
    exit 1
fi

usage(){
    (
    echo -e "Usage: ${yellow}$0${reset} ${green}-u${reset} your_user ${green}-p${reset} profile"
    echo -e "Options:"
    echo -e "\t${green}-u${reset}   -  you need specify your user on the system [${red}needed${reset}]"
    echo -e "\t${green}-p${reset}   -  we have 3 profiles: [${red}needed${reset}]"
    echo -e "\t\t${yellow}>${reset} ${green}recon${reset}: will install ${red}ONLY${reset} the necessary packages to execute recon.sh script on reconnaissance phase"
    echo -e "\t\t${yellow}>${reset} ${green}attack${reset}: will install and get some tools to help on attack phase"
    echo -e "\t\t${yellow}>${reset} ${green}all${reset}: will execute recon and attack functions"
    ) 1>&2 ; exit 1 
}

while getopts ":u:p:" options; do
    case "${options}" in
        u)
            user=$(echo "${OPTARG}" | tr '[:upper:]' '[:lower:]')
            ;;
        p)
            profile=$(echo "${OPTARG}" | tr '[:upper:]' '[:lower:]')
            ;;
        \?)
            usage
            ;;
    esac
    unset options
done
shift $((OPTIND - 1))

if [ -z "${user}" ] || [ -z "${profile}" ]; then
    usage
elif ! awk -F ":" '{print $1}' /etc/passwd | grep "${user}" > /dev/null || \
    [[ ! -d $(awk -F ":" '{print $6}' /etc/passwd | grep "${user}") ]]; then
    usage
elif [[ "${profile}" != "recon"  &&  "${profile}" != "attack" && "${profile}" != "all" ]]; then
    usage
fi

for file in '/etc/os-release' '/etc/lsb-release'; do
    if [ -s ${file} ] && [ "${file}" == "/etc/os-release" ]; then
        distribution="$(grep -E '^NAME' /etc/os-release | awk -F'=' '{print $2}')"
    elif [ -s ${file} ] && [ "${file}" == "/etc/lsb-release" ]; then
        distribution="$(grep DISTRIB_ID /etc/lsb-release | awk -F'=' '{print $2}')"
    fi
done

echo -e "This is my implementation using bash script to setup a remote/vm box with tools to use recon.sh script.\n"

echo -e "\nVerifying directories for exploits, tools and wordlists..."
# Principal dirs
user_home=$(su - "${user}" -c "echo \${HOME}")
pentest_dir="${user_home}/pentest"
# Pentest dir structure
exploits_dir="${pentest_dir}/exploits"
local_recon_dir="${pentest_dir}/local_recon"
pentest_scripts_dir="${pentest_dir}/pentest-scripts"
tools_dir="${pentest_dir}/tools"
wordlists_dir="${pentest_dir}/wordlists"

if [ ! -d "${pentest_dir}" ]; then
    echo -n "pentest directory does not exist, creating... "
    if su - "${user}" -c "mkdir -p ${pentest_dir}" ; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the pentest directory."
        exit 1
    fi
else
    echo "pentest directory OK!"
fi

if [ -d "${pentest_dir}" ] && [ ! -d "${exploits_dir}" ]; then
    echo -n "exploits directory does not exist, creating... "
    if su - "${user}" -c "mkdir -p ${exploits_dir}" ; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the exploits directory."
        exit 1
    fi
else
    echo "exploits directory OK!"
fi

if [ -d "${pentest_dir}" ] && [ ! -d "${local_recon_dir}" ]; then
    echo -n "exploits directory does not exist, creating... "
    if su - "${user}" -c "mkdir -p ${local_recon_dir}" ; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the local_recon directory."
        exit 1
    fi
else
    echo "local_recon directory OK!"
fi

if [ -d "${pentest_dir}" ] && [ ! -d "${pentest_scripts_dir}" ]; then
    echo -n "pentest-scripts directory does not exist, creating... "
    if su - "${user}" -c "git clone https://github.com/skateforever/pentest-scripts.git ${pentest_scripts_dir}"; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the pentest-scripts directory."
        exit 1
    fi
else
    echo "pentest-scripts directory OK!"
fi

if [ -d "${pentest_dir}" ] && [ ! -d "${tools_dir}" ]; then
    echo -n "tools directory does not exist, creating... "
    if su - "${user}" -c "mkdir -p ${tools_dir}" ; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the tools directory."
        exit 1
    fi
else
    echo "tools directory OK!"
fi

if [ -d "${pentest_dir}" ] && [ ! -d "${wordlists_dir}" ]; then
    echo -n "wordlists directory does not exist, creating... "
    if su - "${user}" -c "mkdir -p ${wordlists_dir}" ; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the wordlists directory."
        exit 1
    fi
else
    echo "wordlists directory OK!"
fi

recon_final_message(){
    echo -e "\nOn your local machine, install:"
    echo "  > Burp and your favorite extensions"
    echo "  > Postman"
    echo "  > Chrome/Firefox and your favorite extensions"
    echo "    - Wappalyzer"
    echo "    - Cookie Editor/Manager"
    echo "    - FoxyProxy"
    echo "    - Retire.js"
    echo -e "\nRemeber to use:"
    echo "  > Shodan is your friend!"
    echo "  > Censys.io"
    echo "  > Crt.sh" 
}

attack_final_message(){
    echo "Use https://apis.guru/graphql-voyager/ to complement the output from GraphQL scripts"
}

prepare_system(){
    echo "Keep in mind, you need have your system updated."
    if [[ "${distribution}" == \"Arch\ Linux\" ]]; then
        echo -e "Prepare the system and install packages from ${yellow}pacman${reset}..."
        pacman -Syu
        if [[ "${profile}" == "recon" || "${profile}" == "all" ]]; then
            echo "Installing essential packages from pacman repositories!"
            pacman -S --needed base-devel bind-tools chromium diffutils git go jq nmap python-pip
        fi
        if [[ "${profile}" == "attack" || "${profile}" == "all" ]]; then
            echo "Installing network tools and offensive tools..."
            pacman -S --needed nmap tcpdump whois openbsd-netcat bind-tools socat nikto sqlmap masscan hydra freerdp openvpn tigervnc
            echo "Installing metasploit..."
            pacman -S --needed metasploit
        fi 
    elif [[ "${distribution}" == 'Ubuntu' ]] || [[ "${distribution}" == \"Kali\ GNU/Linux\" ]] || [[ "${distribution}" == 'Kali' ]]; then
        echo -e "Prepare the system and install packages from ${yellow}apt${reset}..."
        apt update
        apt upgrade
        if [[ "${profile}" == "recon" || "${profile}" == "all" ]]; then
            echo "Installing essential packages from apt repositories!"
            apt install build-essential diffutils dnsutils bind9-hots git golang-go jq nmap python3-pip python3-minimal
            if [[ "${distribution}" == 'Ubuntu' ]]; then
                ubuntu_version=$(grep -E ^DISTRIB_RELEASE /etc/lsb-release | awk -F '=' '{print $2}' | awk -F '.' '{print $1}')
                apt install chromium-browser
            else
                apt install chromium
            fi
        fi
        if [[ "${profile}" == "attack" || "${profile}" == "all" ]]; then
            echo "Installing network tools and offensive tools..."
            apt install nmap tcpdump whois dnsutils bind9-host netcat-openbsd nikto sqlmap masscan hydra \
                openvpn freerdp-x11 tigervnc-viewer
            if [[ ! -f /usr/bin/msfconsole && ! -d /opt/metasploit-framework && "${distribution}" == 'Ubuntu' ]]; then
                echo "Installing metasploit..."
                curl -s https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > /tmp/msfinstall
                chmod 755 /tmp/msfinstall
                /tmp/msfinstall
            else
                echo "Metasploit there is in the system!"
            fi
            echo "Verifying python 3.7 to theHarvester..."
            if [[ ${distribution} == 'Ubuntu' ]] && [[ ${ubuntu_version} -le 18 ]] && [[ -z $(command -v python3.7) ]]; then
                echo "Installing python 3.7"
                apt install python3.7
            fi
        fi 
    else
        echo "WTF, This isn't the distribution that you use? What now??"
        echo "Do you want to help me with something? Pull request!"
        exit 1
    fi
}

docker_system(){
    if [[ "${distribution}" == \"Arch\ Linux\" ]]; then
        echo "Installing Docker!"
        pacman -S docker
    elif [[ "${distribution}" == 'Ubuntu' ]] || [[ "${distribution}" == \"Kali\ GNU/Linux\" ]] || [[ "${distribution}" == 'Kali' ]]; then
        echo "Installing Docker!"
        apt install docker docker.io
    fi
    if [ -x /usr/bin/docker ]; then
        echo "Starting up the docker and put it to initialize with the system!"
        systemctl start docker.service
        sleep 2
        systemctl enable docker.service
        sleep 2
        usermod -aG docker "${user}"
        sleep 2
        if pgrep dockerd > /dev/null ; then
            echo "Getting the Privoxy Image to use with recon.sh..."
            su - "${user}" -c "docker build -t privoxy ${pentest_scripts_dir}/tor-docker/"
        else
            echo "Wasn't possible to get the Privoxy Image!"
        fi
    fi  
}

recon_tools(){
    # List of 3rd party binaries and python scripts to use in recon.sh
    amass_bin=/usr/local/bin/amass
    aquatone_bin=/usr/local/bin/aquatone
    dirsearch_bin=/usr/local/bin/dirsearch.py
    dnsrecon_bin=/usr/local/bin/dnsrecon.py
    dnssearch_bin=/usr/local/bin/dnssearch
    gobuster_bin=/usr/local/bin/gobuster
    httprobe_bin=/usr/local/bin/httprobe
    massdns_bin=/usr/local/bin/massdns
    sublist3r_bin=/usr/local/bin/sublist3r.py
    wayback_bin=/usr/local/bin/waybackurls
               
    if [ ! -x "${aquatone_bin}" ]; then
        echo "Getting the Aquatone binary... "
        if su - "${user}" -c "go get -v -u github.com/michenriksen/aquatone"; then
            if su - "${user}" -c "go build github.com/michenriksen/aquatone"; then
                if mv "${user_home}/go/bin/aquatone" /usr/local/bin/; then
                    echo "aquatone binary OK!"
                else
                    echo "Something got wrong with aquatone move!"
                    exit 1
                fi
            else
                echo "Something got wrong with aquatone build!"
                exit 1
            fi
        else
            echo "Something got wrong with aquatone download!"
            exit 1
        fi
    else
        echo "aquatone OK!"
    fi

    if [ ! -x "${amass_bin}" ]; then
        echo "Getting the amass binary..."
        if su - "${user}" -c "go env -w GO111MODULE=on && go get -v -u github.com/OWASP/Amass/v3/..." ; then
                mv "${user_home}"/go/bin/{amass,examples} /usr/local/bin
                if [ -x "${amass_bin}" ] ; then
                    echo "amass binary OK!"
                    echo -n "Turning off the GO111MODULE... "
                    su - "${user}" -c "go env -w GO111MODULE=off"
                    echo "Done!"
                else
                    echo "Something got wrong with amass move!"
                    exit 1
                fi
        else
            echo "Something got wrong with amass download!"
            exit 1
        fi
    else
        echo "amass OK!"
    fi

    if [ ! -x "${dirsearch_bin}" ]; then
        echo "Getting dirsearch python script..."
        if su - "${user}" -c "git clone https://github.com/maurosoria/dirsearch.git ${tools_dir}/dirsearch" ; then
            if ln -s "${tools_dir}"/dirsearch/dirsearch.py "${dirsearch_bin}" ; then
                echo "Dirsearch python script OK!"
            else
                echo "Something got wrong creating symlink for dirsearch!"
            fi
        else
            echo "Something got wrong with Dirsearch repository clone!"
            exit 1
        fi
    else
        echo "Dirsearch OK!"
    fi

    if [ ! -x "${dnsrecon_bin}" ]; then
        echo "Getting the DNSRecon python script..."
        su - "${user}" -c "git clone https://github.com/darkoperator/dnsrecon.git ${tools_dir}/dnsrecon"
        if pip3 install -r "${tools_dir}"/dnsrecon/requirements.txt > /dev/null && ln -s "${tools_dir}"/dnsrecon/dnsrecon.py "${dnsrecon_bin}"; then
            echo "DNSRecon python script OK!"
        else
            echo "Something got wrong cloning DNSRecon!"
            exit 1
        fi
    else
        echo "DNSRecon OK!"
    fi

    if [ ! -x "${dnssearch_bin}" ]; then
        echo "Getting DNSSearch..."
        if su - "${user}" -c "go get -u github.com/evilsocket/dnssearch" ; then
            if mv "${user_home}"/go/bin/dnssearch "${dnssearch_bin}" ; then
                echo "DNSSearch OK!"
            else
                echo "Something got wrong with DNSSearch move!"
                exit 1
            fi
        else
            echo "Something got wrong with DNSSearch build!"
            exit 1
        fi
    else
        echo "DNSSearch OK!"
    fi

    if [ ! -x "${gobuster_bin}" ]; then
        echo "Getting the Gobuster binary..."
        if su - "${user}" -c "go get -u github.com/OJ/gobuster" ; then
            if mv "${user_home}"/go/bin/gobuster "${gobuster_bin}"; then
                echo "Gobuster binary OK!"
            else
                echo "Something got wrong with Gobuster move!"
                exit 1
            fi
        else
            echo "Something got wrong with Gobuster build!"
            exit 1
        fi
    else
        echo "Gobuster OK!"
    fi

    if [ ! -x "${httprobe_bin}" ]; then
        echo "Getting the HttProbe binary..."
        if su - "${user}" -c "go get -u github.com/tomnomnom/httprobe" ; then
            if mv "${user_home}"/go/bin/httprobe "${httprobe_bin}"; then
                echo "HttProbe binary OK!"
            else    
                echo "Something got wrong with HttProbe move!"
                exit 1
            fi
        else
            echo "Something got wrong with HttProbe build!"
            exit 1
        fi
    else
        echo "HttProbe OK!"
    fi

    if [ ! -x "${massdns_bin}" ]; then
        echo "Getting the massdns source code..."
        su - "${user}" -c "git clone https://github.com/blechschmidt/massdns.git ${tools_dir}/massdns > /dev/null"
        echo "Compiling massdns binary..."
        if su - "${user}" -c "cd ${tools_dir}/massdns ; make > /dev/null" ; then
            if mv "${tools_dir}"/massdns/bin/massdns "${massdns_bin}" && mv "${tools_dir}"/massdns/scripts/* /usr/local/bin/ ; then
                sed -i '1s/python/python3/' /usr/local/bin/censys-extract.py
                sed -i '1s/python/python3/' /usr/local/bin/dnsparse.py
                sed -i '1s/python/python3/' /usr/local/bin/ptr.py
                sed -i '1s/python/python3/' /usr/local/bin/subbrute.py
                echo "MassDNS binary OK!"
            else
                echo "Something moving the massdns files!"
            fi
        else
            echo "Something got wrong with MassDNS"
            exit 1
        fi
    else
        echo "MassDNS OK!"
    fi

    if [ ! -x "${sublist3r_bin}" ]; then
        echo "Getting the Sublist3r python script..."
        if su - "${user}" -c "git clone https://github.com/aboul3la/Sublist3r.git ${tools_dir}/Sublist3r > /dev/null" ; then
            if pip3 install -r "${tools_dir}"/Sublist3r/requirements.txt > /dev/null && \
                ln -s "${tools_dir}"/Sublist3r/sublist3r.py "${sublist3r_bin}"; then
                echo "Sublist3r OK!"
            else
                echo "Something got work with pip!"
            fi
        else
            echo "Something got wrong with Sublist3r"
            exit 1
        fi
    else    
        echo "Sublist3r OK!"
    fi

    if [ ! -x "${wayback_bin}" ]; then
        echo "Getting the Waybackurls binary..."
        if su - "${user}" -c "go get -u github.com/tomnomnom/waybackurls" ; then
            if mv "${user_home}"/go/bin/waybackurls "${wayback_bin}" ; then
                echo "Waybackurls OK!"
            else
                echo "Something got wrong with Waybackurls move!"
                exit 1
            fi
        else
            echo "Something got wrong with Waybackurls build!"
            exit 1
        fi
    else
        echo "Waybackurls OK!"
    fi
}

attack_tools(){
    # Tools
    reconng_bin="${tools_dir}/recon-ng/recon-ng"
    theharvester_bin="${tools_dir}/theHarvester/theHarvester.py"
    wordlist_bin="/usr/local/bin/wordlistgen"
    jexboss_bin="${tools_dir}/jexboss/jexboss.py"
    searchsploit_bin="${exploits_dir}/exploitdb/searchsploit"
    wpscan_bin="/usr/local/bin/wpscan"
    ysoserial_bin="${tools_dir}/ysoserial/ysoserial.jar"

    echo "Getting the recon-ng python script..."
    su - "${user}" -c "git clone https://github.com/lanmaster53/recon-ng.git ${tools_dir}/recon-ng"
    if pip3 install -r "${tools_dir}/recon-ng/REQUIREMENTS" && [ -x "${reconng_bin}" ]; then
        ln -s "${reconng_bin}" /usr/local/bin/
        echo "recon-ng python script OK!"
    else
        echo "Something got wrong with recon-ng!"
        exit 1
    fi

    echo "Getting the theHarverster..."
    su - "${user}" -c "git clone https://github.com/laramies/theHarvester.git ${tools_dir}/theHarvester"
    if [[ "${distribution}" == 'Ubuntu' ]] && [[ "${ubuntu_version}" -le 18 ]] && [[ -n $(command -v python3.7) ]]; then
        su - "${user}" -c "python3.7 -m pip install pip"
        su - "${user}" -c "pip3.7 install -r ${tools_dir}/theHarvester/requirements.txt"
        su - "${user}" -c "sed -i 's/python3/python3.7/' ${theharvester_bin}"
    elif pip3 install -r "${tools_dir}/theHarvester/requirements.txt" && [ -x "${theharvester_bin}" ]; then
        ln -s "${theharvester_bin}" /usr/local/bin/
        echo "theHavester OK!"
    else
        echo "Something got wrong with theHarvester..."
        exit 1
    fi

    echo "Getting the wordlistgen binary..."
    if su - "${user}" -c "go get -u github.com/ameenmaali/wordlistgen"; then
        mv "${user_home}/go/bin/wordlistgen" /usr/local/bin/
        if [ -x "${wordlist_bin}" ]; then
            echo "wordlistgen binary OK!"
        else
            echo "Something got wrong with wordlistgen move..."
            exit 1
        fi
    else
        echo "Something got wrong with wordlistgen build..."
        exit 1
    fi

    echo "Getting jexboss..."
    su - "${user}" -c "git clone https://github.com/joaomatosf/jexboss.git ${tools_dir}/jexboss"
    if pip3 install -r "${tools_dir}/jexboss/requires.txt" && [ -x "${jexboss_bin}" ]; then
        ln -s "${jexboss_bin}" /usr/local/bin/
        echo "Jexboss Python Script OK!"
    else
        echo "Something got wrong with Jexboss..."
        exit 1
    fi

    echo "Gettting searchsploit..."
    su - "${user}" -c "git clone https://github.com/offensive-security/exploitdb.git ${exploits_dir}/exploitdb"
    su - "${user}" -c "sed -i \"s/\/opt/${exploits_dir}/\" ${exploits_dir}/exploitdb/.searchsploit_rc"
    if [ -x "${searchsploit_bin}" ]; then
        ln -s "${searchsploit_bin}" /usr/local/bin/
        echo "Searchsploit script OK"
    else
        echo "Something got wrong with searchsploit"
        exit 1
    fi

    echo "Getting wpscan..."
    if gem install -n /usr/local/bin wpscan && [ -x ${wpscan_bin} ]; then
        chown "${user}":"${user}" "${wpscan_bin}"
        echo "WPScan binary OK"
    else
        echo "Something got wrong with WPScan..."
        exit 2
    fi

    echo "Getting ysoserial..."
    su - "${user}" -c "mkdir -pv ${tools_dir}/ysoserial"
    su - "${user}" -c "wget --quiet -c https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar \
        -O ${tools_dir}/ysoserial/ysoserial.jar"
    if [ -x "${ysoserial_bin}" ]; then
        echo "ysoserial jar file OK!"
    else
        echo "Something got wrong with ysoserial..."
    fi

    echo "Anothers tools..."
    su - "${user}" -c "git clone https://github.com/galkan/crowbar.git ${tools_dir}/crowbar"
    pip2 install paramiko
}

exploits(){
    # Exploits
    echo "Getting some exploits..."
    su - "${user}" -c "git clone https://github.com/pimps/CVE-2019-2725.git ${exploits_dir}/CVE-2019-2725"
    su - "${user}" -c "git clone https://github.com/pimps/CVE-2017-1000486.git ${exploits_dir}/CVE-2017-1000486"
    su - "${user}" -c "git clone https://github.com/pimps/CVE-2017-5645.git ${exploits_dir}/CVE-2017-5645"
    su - "${user}" -c "wget --quiet -c https://github.com/pimps/ysoserial-modified/raw/master/target/ysoserial-modified.jar -O ${exploits_dir}/ysoserial-pimps.jar"
    su - "${user}" -c "git clone https://github.com/pimps/CVE-2018-7600.git ${exploits_dir}/CVE-2018-7600"
    su - "${user}" -c "git clone https://github.com/0xdea/exploits.git ${exploits_dir}/0xdea-exploits"
    echo "Downloading ysoserial.net and AspDotNetWrapper..."
    su - "${user}" -c "wget --quiet -c https://github.com/pwntester/ysoserial.net/releases/download/v1.32/ysoserial-1.32.zip -O ${exploits_dir}/ysoserialdotnet-1.32.zip"
    su - "${user}" -c "git clone https://github.com/NotSoSecure/Blacklist3r.git ${exploits_dir}/Blacklist3r"
    su - "${user}" -c "wget --quiet -c https://github.com/NotSoSecure/Blacklist3r/releases/download/3.0/AspDotNetWrapper.zip -O ${exploits_dir}/Blacklist3r/AspDotNetWrapper.zip"
    su - "${user}" -c "git clone https://github.com/worawit/MS17-010.git ${exploits_dir}/MS17-010"
    
    echo "Getting some tools to enumerate"
    # DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support
    su - "${user}" -c "git clone https://github.com/BlackDiverX/ssh-user-enumeration.git ${tools_dir}/ssh-user-enumeration"
    pip3 install -r "${tools_dir}/ssh-user-enumeration/requirements.txt"

    # Tools to recon and bypass CloudFlare
    su - "${user}" -c "git clone https://github.com/m0rtem/CloudFail.git ${tools_dir}/CloudFail"
    pip3 install -r "${tools_dir}/CloudFail/requirements.txt"
    # ERROR: dulwich 0.19.15 has requirement urllib3>=1.24.1, but you'll have urllib3 1.22 which is incompatible.
    su - "${user}" -c "git clone https://github.com/christophetd/CloudFlair.git ${tools_dir}/CloudFlair"
    pip3 install -r "${tools_dir}/CloudFlair/requirements.txt"
    echo "To use cloudflair.py you need..."
    echo "Register an account (free) on https://censys.io/register"
    echo "Browse to https://censys.io/account/api, and set two environment variables with your API ID and API secret"
    echo "$ export CENSYS_API_ID=..."
    echo "$ export CENSYS_API_SECRET=..."
    su - "${user}" -c "git clone https://github.com/HatBashBR/HatCloud.git ${tools_dir}/HatCloud"
    echo "Fix the url to acess the http://www.crimeflare.org:82/cfs.html#box"
    su - "${user}" -c "sed -i '64s/crimeflare.us/crimeflare.org/' ${tools_dir}/HatCloud/hatcloud.rb"

    echo "Tools to GraphQL..."
    su - "${user}" -c "git clone https://github.com/doyensec/graph-ql.git ${tools_dir}/graph-ql"
    su - "${user}" -c "git clone https://github.com/swisskyrepo/GraphQLmap.git ${tools_dir}/GraphQLmap"

    echo "Tools to OSINT on github..."
    su - "${user}" -c "git clone https://github.com/gwen001/github-search.git ${tools_dir}/github-search"
    su - "${user}" -c "git clone https://github.com/internetwache/GitTools.git ${tools_dir}/GitTools"
    su - "${user}" -c "git clone https://github.com/FeeiCN/GSIL ${tools_dir}/GSIL"

    # Vulns Scan
    echo "Vulns Scan..."
    su - "${user}" -c "git clone https://github.com/scipag/vulscan ${tools_dir}/vulnscan"
    su - "${user}" -c "git clone https://github.com/toolswatch/blackhat-arsenal-tools ${tools_dir}/blackhat-arsenal-tools"
    su - "${user}" -c "git clone https://github.com/future-architect/vuls ${tools_dir}/vuls"

    # CoronaBlue/SMBGhost
    su - "${user}" -c "git clone https://github.com/eerykitty/CVE-2020-0796-PoC ${exploits_dir}/CVE-2020-0796-PoC"
    su - "${user}" -c "git clone https://github.com/ioncodes/SMBGhost ${exploits_dir}/SMBGhost"
}

bashrc_functions(){
    echo -n "Creating some aliases and functions... "
    if su - "${user}" -c "cp ${user_home}/.bashrc ${user_home}/.bashrc-$(date +%Y%m%d)"; then
        if ! grep nsesearch "${user_home}/.bashrc" > /dev/null; then
            echo "
            nsesearch() {
                if [ $# == 1 ]; then
                    find /usr/share/nmap/scripts/ | grep $1
                fi
            }" >> "${user_home}/.bashrc"
        fi
        echo "Done!"
    fi
}

wordlists(){
echo "Getting some wordlists..."
if [ -d "${wordlists_dir}" ]; then
    su - "${user}" -c "mkdir -pv ${wordlists_dir}/dns"
    su - "${user}" -c "mkdir -pv ${wordlists_dir}/web"
    su - "${user}" -c "git clone https://github.com/danielmiessler/SecLists.git ${wordlists_dir}/SecLists"
    #This file breaks massdns and needs to be cleaned
    echo "Removing bad chars from Jhaddix's wordlist head..."
    su - "${user}" -c "cp ${wordlists_dir}/SecLists/Discovery/DNS/dns-Jhaddix.txt ${wordlists_dir}/SecLists/Discovery/DNS/clean-jhaddix-dns.txt"
    su - "${user}" -c "sed -i 1,14d ${wordlists_dir}/SecLists/Discovery/DNS/clean-jhaddix-dns.txt"
    echo "Cloning knock wordlist."
    su - "${user}" -c "wget --quiet -c https://raw.githubusercontent.com/guelfoweb/knock/4.1/knockpy/wordlist/wordlist.txt -O ${wordlists_dir}/dns/knock-wl.txt"
    echo "Cloning subbrute wordlist."
    su - "${user}" -c "wget --quiet -c https://raw.githubusercontent.com/TheRook/subbrute/master/names.txt -O ${wordlists_dir}/dns/subbrute-wl.txt"
    echo "Cloning dirbuster wordlists."
    su - "${user}" -c "wget --quiet -c \"https://pt.osdn.net/frs/g_redir.php?m=kent&f=dirbuster%2FDirBuster+Lists%2FCurrent%2FDirBuster-Lists.tar.bz2\" -O /tmp/DirBuster-Lists.tar.bz2"
    su - "${user}" -c "tar xf /tmp/DirBuster-Lists.tar.bz2 -C ${wordlists_dir} ; rm -rf /tmp/DirBuster-Lists.tar.bz2"
fi
}

if [ "${profile}" == "recon" ]; then
    prepare_system
    recon_tools
    docker_system
    wordlists
    bash_functions
    recon_final_message
elif [ "${profile}" == "attack" ]; then
    prepare_system
    attack_tools
    exploits
    attack_final_message
elif [ "${profile}" == "all" ]; then
    prepare_system
    recon_tools
    docker_system
    attack_tools
    exploits
    wordlists
    bash_functions
    attack_final_message
    recon_final_message
else
    usage
fi
