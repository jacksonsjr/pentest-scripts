#!/bin/bash

# get-tools.sh

red="\e[31m"
green="\e[32m"
yellow="\e[33m"
reset="\e[0m"

#if [ ${EUID} -ne 0 ]; then
#    echo -e "Please, execute this script with ${red}root${reset}..." 
#    echo "Because this script install packages with package manager"
#    echo "from your distro and configure some tools files in /etc!"
#    echo "If you'll use sudo, please run it with -H option 'cause some pip installation!"
#    exit 1
#fi

usage(){
    (
    echo -e "Usage: ${yellow}$0${reset} ${green}-u${reset} your_user ${green}-p${reset} profile"
    echo -e "Options:"
    echo -e "\t${green}-u${reset}   -  you need specify your user on the system [${red}needed${reset}]"
    echo -e "\t${green}-p${reset}   -  we have 3 profiles: [${red}needed${reset}]"
    echo -e "\t\t${yellow}>${reset} ${green}recon${reset}: will install ${red}ONLY${reset} the necessary packages to execute recon.sh script on reconnaissance phase"
    echo -e "\t\t${yellow}>${reset} ${green}attack${reset}: will install and get some tools to help on attack phase"
    echo -e "\t\t${yellow}>${reset} ${green}all${reset}: will execute recon and attack functions"
    ) 1>&2 ; exit 1 
}

while getopts ":u:p:h:" options; do
    case "${options}" in
        u)
            user=$(echo "${OPTARG}" | tr '[:upper:]' '[:lower:]')
            ;;
        p)
            profile=$(echo "${OPTARG}" | tr '[:upper:]' '[:lower:]')
            ;;
        \?)
            usage
            ;;
    esac
    unset options
done
shift $((OPTIND - 1))

if [ -z "${user}" ] || [ -z "${profile}" ]; then
    usage
elif ! awk -F ":" '{print $1}' /etc/passwd | grep "${user}" > /dev/null || \
    [[ ! -d $(awk -F ":" '{print $6}' /etc/passwd | grep "${user}") ]]; then
    usage
elif [[ "${profile}" != "recon"  &&  "${profile}" != "attack" && "${profile}" != "all" ]]; then
    usage
fi

for file in '/etc/os-release' '/etc/lsb-release'; do
    if [ -s ${file} ] && [ "${file}" == "/etc/os-release" ]; then
        distribution="$(grep -E '^NAME' /etc/os-release | awk -F'=' '{print $2}')"
    elif [ -s ${file} ] && [ "${file}" == "/etc/lsb-release" ]; then
        distribution="$(grep DISTRIB_ID /etc/lsb-release | awk -F'=' '{print $2}')"
    fi
done

echo -e "\nVerifying directories for tools and wordlists..."
# Principal dirs
user_home=$(su - "${user}" -c "echo \${HOME}")
pentest_dir="${user_home}"/pentest
# Pentest dir structure
exploits_dir="${pentest_dir}"/exploits
local_recon_dir="${pentest_dir}"/local_recon
tools_dir=${pentest_dir}/tools
wordlists_dir=${pentest_dir}/wordlists

if [ ! -d "${pentest_dir}" ]; then
    echo -n "pentest directory does not exist, creating... "
    if su - "${user}" -c "mkdir -p ${pentest_dir}" ; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the pentest directory."
        exit 1
    fi
else
    echo "pentest directory OK!"
fi

if [ -d "${pentest_dir}" ] && [ ! -d "${exploits_dir}" ]; then
    echo -n "exploits directory does not exist, creating... "
    if su - "${user}" -c "mkdir -p ${exploits_dir}" ; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the exploits directory."
        exit 1
    fi
else
    echo "exploits directory OK!"
fi

if [ -d "${pentest_dir}" ] && [ ! -d "${local_recon_dir}" ]; then
    echo -n "exploits directory does not exist, creating... "
    if su - "${user}" -c "mkdir -p ${local_recon_dir}" ; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the local_recon directory."
        exit 1
    fi
else
    echo "local_recon directory OK!"
fi

if [ -d "${pentest_dir}" ] && [ ! -d "${tools_dir}" ]; then
    echo -n "tools directory does not exist, creating... "
    if su - "${user}" -c "mkdir -p ${tools_dir}" ; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the tools directory."
        exit 1
    fi
else
    echo "tools directory OK!"
fi

if [ -d "${pentest_dir}" ] && [ ! -d "${wordlists_dir}" ]; then
    echo -n "wordlists directory does not exist, creating... "
    if su - "${user}" -c "mkdir -p ${wordlists_dir}" ; then
        echo "Done!"
    else
        echo -e "\nSomething got wrong creating the wordlists directory."
        exit 1
    fi
else
    echo "wordlists directory OK!"
fi

initial_message(){
    echo -e "This is my implementation using bash script to setup a remote/vm box with tools to use recon.sh script.\n"
}

recon_final_message(){
    echo -e "\nOn your local machine, install:"
    echo "  > Burp and your favorite extensions"
    echo "  > Postman"
    echo "  > Chrome/Firefox and your favorite extensions"
    echo "    - Wappalyzer"
    echo "    - Cookie Editor/Manager"
    echo "    - FoxyProxy"
    echo "    - Retire.js"
}

prepare_system(){
    echo "Keep in mind, you need have your system updated."
    if [[ "${distribution}" == \"Arch\ Linux\" ]]; then
        echo -e "Prepare the system and install packages from ${yellow}pacman${reset}..."
        pacman -Syu
        echo "Installing essential packages from pacman repositories!"
        pacman -S --needed base-devel bind-tools chromium diffutils git go jq nmap python-pip
    elif [[ "${distribution}" == 'Ubuntu' ]] || [[ "${distribution}" == \"Kali\ GNU/Linux\" ]] || [[ "${distribution}" == 'Kali' ]]; then
        echo -e "Prepare the system and install packages from ${yellow}apt${reset}..."
        apt update
        apt upgrade
        echo "Installing essential packages from apt repositories!"
        apt install build-essential diffutils dnsutils bind9-hots git golang-go jq nmap python3-pip python3-minimal
        if [[ "${distribution}" == 'Ubuntu' ]]; then
            apt install chromium-browser
        else
            apt install chromium
        fi
    else
        echo "WTF, This isn't the distribution that you use? What now??"
        echo "Do you want to help me with something? Pull request!"
        exit 1
    fi
}

recon(){
# List of 3rd party binaries and python scripts to use in recon.sh
amass_bin=/usr/local/bin/amass
aquatone_bin=/usr/local/bin/aquatone
dirsearch_bin=/usr/local/bin/dirsearch.py
dnsrecon_bin=/usr/local/bin/dnsrecon.py
dnssearch_bin=/usr/local/bin/dnssearch
gobuster_bin=/usr/local/bin/gobuster
httprobe_bin=/usr/local/bin/httprobe
massdns_bin=/usr/local/bin/massdns
sublist3r_bin=/usr/local/bin/sublist3r.py
wayback_bin=/usr/local/bin/waybackurls
               
if [ ! -x "${aquatone_bin}" ]; then
    echo "Getting the Aquatone binary... "
    if su - "${user}" -c "go get -v -u github.com/michenriksen/aquatone"; then
        if su - "${user}" -c "go build github.com/michenriksen/aquatone"; then
            if mv "${user_home}"/go/bin/aquatone "${aquatone_bin}"; then
                echo "aquatone binary OK!"
            else
                echo "Something got wrong with aquatone move!"
                exit 1
            fi
        else
            echo "Something got wrong with aquatone build!"
            exit 1
        fi
    else
        echo "Something got wrong with aquatone download!"
        exit 1
    fi
else
    echo "aquatone OK!"
fi

if [ ! -x "${amass_bin}" ]; then
    echo "Getting the amass binary..."
    if su - "${user}" -c "go env -w GO111MODULE=on && go get -v -u github.com/OWASP/Amass/v3/..." ; then
            mv "${user_home}"/go/bin/{amass,examples} /usr/local/bin
            if [ -x "${amass_bin}" ] ; then
                echo "amass binary OK!"
                echo -n "Turning off the GO111MODULE... "
                su - "${user}" -c "go env -w GO111MODULE=off"
                echo "Done!"
            else
                echo "Something got wrong with amass move!"
                exit 1
            fi
    else
        echo "Something got wrong with amass download!"
        exit 1
    fi
else
    echo "amass OK!"
fi

if [ ! -x "${dirsearch_bin}" ]; then
    echo "Getting dirsearch python script..."
    if su - "${user}" -c "git clone https://github.com/maurosoria/dirsearch.git ${tools_dir}/dirsearch" ; then
        if ln -s "${tools_dir}"/dirsearch/dirsearch.py "${dirsearch_bin}" ; then
            echo "Dirsearch python script OK!"
        else
            echo "Something got wrong creating symlink for dirsearch!"
        fi
    else
        echo "Something got wrong with Dirsearch repository clone!"
        exit 1
    fi
else
    echo "Dirsearch OK!"
fi

if [ ! -x "${dnsrecon_bin}" ]; then
    echo "Getting the DNSRecon python script..."
    su - "${user}" -c "git clone https://github.com/darkoperator/dnsrecon.git ${tools_dir}/dnsrecon"
    if pip3 install -r "${tools_dir}"/dnsrecon/requirements.txt > /dev/null && ln -s "${tools_dir}"/dnsrecon/dnsrecon.py "${dnsrecon_bin}"; then
        echo "DNSRecon python script OK!"
    else
        echo "Something got wrong cloning DNSRecon!"
        exit 1
    fi
else
    echo "DNSRecon OK!"
fi

if [ ! -x "${dnssearch_bin}" ]; then
    echo "Getting DNSSearch..."
    if su - "${user}" -c "go get -u github.com/evilsocket/dnssearch" ; then
        if mv "${user_home}"/go/bin/dnssearch "${dnssearch_bin}" ; then
            echo "DNSSearch OK!"
        else
            echo "Something got wrong with DNSSearch move!"
            exit 1
        fi
    else
        echo "Something got wrong with DNSSearch build!"
        exit 1
    fi
else
    echo "DNSSearch OK!"
fi

if [ ! -x "${gobuster_bin}" ]; then
    echo "Getting the Gobuster binary..."
    if su - "${user}" -c "go get -u github.com/OJ/gobuster" ; then
        if mv "${user_home}"/go/bin/gobuster "${gobuster_bin}"; then
            echo "Gobuster binary OK!"
        else
            echo "Something got wrong with Gobuster move!"
            exit 1
        fi
    else
        echo "Something got wrong with Gobuster build!"
        exit 1
    fi
else
    echo "Gobuster OK!"
fi

if [ ! -x "${httprobe_bin}" ]; then
    echo "Getting the HttProbe binary..."
    if su - "${user}" -c "go get -u github.com/tomnomnom/httprobe" ; then
        if mv "${user_home}"/go/bin/httprobe "${httprobe_bin}"; then
            echo "HttProbe binary OK!"
        else
            echo "Something got wrong with HttProbe move!"
            exit 1
        fi
    else
        echo "Something got wrong with HttProbe build!"
        exit 1
    fi
else
    echo "HttProbe OK!"
fi

if [ ! -x "${massdns_bin}" ]; then
    echo "Getting the massdns source code..."
    su - "${user}" -c "git clone https://github.com/blechschmidt/massdns.git ${tools_dir}/massdns > /dev/null"
    echo "Compiling massdns binary..."
    if su - "${user}" -c "cd ${tools_dir}/massdns ; make > /dev/null" ; then
        if mv "${tools_dir}"/massdns/bin/massdns "${massdns_bin}" && mv "${tools_dir}"/massdns/scripts/* /usr/local/bin/ ; then
            sed -i '1s/python/python3/' /usr/local/bin/censys-extract.py
            sed -i '1s/python/python3/' /usr/local/bin/dnsparse.py
            sed -i '1s/python/python3/' /usr/local/bin/ptr.py
            sed -i '1s/python/python3/' /usr/local/bin/subbrute.py
            echo "MassDNS binary OK!"
        else
            echo "Something moving the massdns files!"
        fi
    else
        echo "Something got wrong with MassDNS"
        exit 1
    fi
else
    echo "MassDNS OK!"
fi

if [ ! -x "${sublist3r_bin}" ]; then
    echo "Getting the Sublist3r python script..."
    if su - "${user}" -c "git clone https://github.com/aboul3la/Sublist3r.git ${tools_dir}/Sublist3r > /dev/null" ; then
        if pip3 install -r "${tools_dir}"/Sublist3r/requirements.txt > /dev/null && \
            ln -s "${tools_dir}"/Sublist3r/sublist3r.py "${sublist3r_bin}"; then
            echo "Sublist3r OK!"
        else
            echo "Something got work with pip!"
        fi
    else
        echo "Something got wrong with Sublist3r"
        exit 1
    fi
else
    echo "Sublist3r OK!"
fi

if [ ! -x "${wayback_bin}" ]; then
    echo "Getting the Waybackurls binary..."
    if su - "${user}" -c "go get -u github.com/tomnomnom/waybackurls" ; then
        if mv "${user_home}"/go/bin/waybackurls "${wayback_bin}" ; then
            echo "Waybackurls OK!"
        else
            echo "Something got wrong with Waybackurls move!"
            exit 1
        fi
    else
        echo "Something got wrong with Waybackurls build!"
        exit 1
    fi
else
    echo "Waybackurls OK!"
fi
}

wordlists(){
echo "Getting some wordlists..."
if [ -d "${wordlists_dir}" ]; then
    su - "${user}" -c "mkdir -pv ${wordlists_dir}/dns"
    su - "${user}" -c "mkdir -pv ${wordlists_dir}/web"
    su - "${user}" -c "git clone https://github.com/danielmiessler/SecLists.git ${wordlists_dir}/SecLists"
    #This file breaks massdns and needs to be cleaned
    echo "Removing bad chars from Jhaddix's wordlist head..."
    su - "${user}" -c "cp ${wordlists_dir}/SecLists/Discovery/DNS/dns-Jhaddix.txt ${wordlists_dir}/SecLists/Discovery/DNS/clean-jhaddix-dns.txt"
    su - "${user}" -c "sed -i 1,14d ${wordlists_dir}/SecLists/Discovery/DNS/clean-jhaddix-dns.txt"
    echo "Cloning knock wordlist."
    su - "${user}" -c "wget --quiet -c https://raw.githubusercontent.com/guelfoweb/knock/4.1/knockpy/wordlist/wordlist.txt -O ${wordlists_dir}/dns/knock-wl.txt"
    echo "Cloning subbrute wordlist."
    su - "${user}" -c "wget --quiet -c https://raw.githubusercontent.com/TheRook/subbrute/master/names.txt -O ${wordlists_dir}/dns/subbrute-wl.txt"
    echo "Cloning dirbuster wordlists."
    su - "${user}" -c "wget --quite -c \"https://pt.osdn.net/frs/g_redir.php?m=kent&f=dirbuster%2FDirBuster+Lists%2FCurrent%2FDirBuster-Lists.tar.bz2\" -O /tmp/DirBuster-Lists.tar.bz2"
    su - "${user}" -c "tar xf /tmp/DirBuster-Lists.tar.bz2 -C ${wordlists_dir} ; rm -rf /tmp/DirBuster-Lists.tar.bz2"
fi
}

if [ "${profile}" == "recon" ]; then
    initial_message
    prepare_system
    recon
    wordlists
    recon_final_message
elif [ "${profile}" == "attack" ]; then
    initial_message
    prepare_system
    attack
elif [ "${profile}" == "all" ]; then
    initial_message
    prepare_system
    recon
    attack
    wordlists
    recon_final_message
else
    usage
fi
