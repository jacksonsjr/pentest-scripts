#!/bin/bash

red="\e[31m"
green="\e[32m"
yellow="\e[33m"
reset="\e[0m"

echo -e "This is my implementation using bash script to setup a remote/vm box\nwith tools I use to Pentest, feel free to modify or help me to improve!\n"

if [ ${EUID} -ne 0 ]; then
    echo "Please, execute this script with root..." 
    echo "Because this script install packages with package manager"
    echo "from your distro and configure some tools files in /etc!"
    echo "If you'll use sudo, please run it with -H option 'cause some pip installation!"
    exit 1
fi

user="$1"

if [ -z ${user} ]; then
    echo "Usage: $0 your_user"
    exit 2
fi

for file in '/etc/os-release' '/etc/lsb-release'; do
    if [ -s ${file} ] && [ "${file}" == "/etc/os-release" ]; then
        distribution="$(grep -E '^NAME' /etc/os-release | awk -F'=' '{print $2}')"
    elif [ -s ${file} ] && [ "${file}" == "/etc/lsb-release" ]; then
        distribution="$(grep DISTRIB_ID /etc/lsb-release | awk -F'=' '{print $2}')"
    fi
done

if [[ ${distribution} == \"Arch\ Linux\" ]]; then
    echo "Keep in mind, you need have your system updated."
    echo "Prepare the system and install packages from pacman..."
    pacman -Syu
    echo "Installing essential packages from pacman repositories!"
    pacman -S --needed git go ruby jq chromium python-pip python2-pip postgresql diffutils docker docker-compose
    echo "Installing network tools and offensive tools..."
    pacman -S --needed nmap tcpdump whois openbsd-netcat bind-tools socat nikto greenbone-vulnerability-manager sqlmap masscan hydra \
        freerdp openvpn tigervnc
    echo "Installing metasploit..."
    pacman -S --needed metasploit
elif [[ ${distribution} == 'Ubuntu' ]] || [[ ${distribution} == \"Kali\ GNU\/Linux\" ]] || [[ ${distribution} == 'Kali' ]]; then
    echo "Keep in mind, you need have your system update."
    echo "Prepare the system and install packages from apt..."
    apt update
    apt upgrade
    echo "Installing essential packages from apt repositories!"
    apt install build-essential git golang-go ruby ruby-bundler ruby-dev jq python-pip python3-pip python3-minimal postgresql \
        diffutils docker docker-compose docker.io
    echo "Installing network tools and offensive tools..."
    apt install nmap tcpdump whois dnsutils bind9-host netcat-openbsd nikto \
        openvas openvas-cli openvas-manager openvas-manager-common openvas-nasl openvas-scanner \
        greenbone-security-assistant greenbone-security-assistant-common sqlmap masscan hydra \
        openvpn freerdp-x11 tigervnc-viewer
    if [[ ${distribution} == 'Ubuntu' ]]; then
        ubuntu_version=$(grep -E ^DISTRIB_RELEASE /etc/lsb-release | awk -F '=' '{print $2}' | awk -F '.' '{print $1}')
        apt install chromium-browser
    else
        apt install chromium
    fi
    if [ ! -f /usr/bin/msfconsole ] && [ ! -d /opt/metasploit-framework ]; then
        echo "Installing metasploit..."
        curl -s https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > /tmp/msfinstall
        chmod 755 /tmp/msfinstall
        /tmp/msfinstall
    else
        echo "Metasploit there is in the system!"
    fi
    echo "Verifying python 3.7 to theHarvester!"
    if [[ ${distribution} == 'Ubuntu' ]] && [[ ${ubuntu_version} -le 18 ]] && [[ -z $(which python3.7) ]]; then
        echo "Installing python 3.7"
        apt install python3.7
    fi
else
    echo "WTF, This isn't the distribution that you use? What now??"
    echo "Do you want to help me with something? Pull request!"
    exit 1
fi

if [ -s /usr/bin/docker ]; then
    usermod -aG docker ${user}
    systemctl start docker.service
    systemctl enable docker.service
fi

echo "Verifying directories for tools, exploits and wordlists..."
sleep 2
# Principal dirs
user_home=$(su - ${user} -c "echo \${HOME}")
pentest_dir=${user_home}/pentest
# Pentest dir structure
exploits_dir=${pentest_dir}/exploits
leaks_dir=${pentest_dir}/leaks
scripts_dir=${pentest_dir}/pentest-scripts
tools_dir=${pentest_dir}/tools
wordlists_dir=${pentest_dir}/wordlists

if [ ! -d ${pentest_dir} ]; then
    echo "pentest directory does not exist, creating..."
    su - ${user} -c "mkdir -pv ${pentest_dir}"
    if [ $? -ne 0 ]; then
        echo "Something got wrong creating the pentest directory."
        exit 2
    fi
else
    echo "pentest directory OK!"
fi
#
if [ -d ${pentest_dir} ] && [ ! -d ${exploits_dir} ]; then
    echo "Exploit directory does not exist, creating..."
    su - ${user} -c "mkdir -pv ${exploits_dir}"
    if [ $? -ne 0 ]; then
        echo "Something got wrong creating the exploits directory."
        exit 2
    fi
else
    echo "Exploits directory OK!"
fi

if [ -d ${pentest_dir} ] && [ ! -d ${leaks_dir} ]; then
    echo "Leak directory does not exist, creating..."
    su - ${user} -c "mkdir -pv ${leaks_dir}"
    if [ $? -ne 0 ]; then
        echo "Something got wrong creating the leak directory."
        exit 2
    fi
else
    echo "Leak directory OK!"
fi

if [ -d ${pentest_dir} ] && [ ! -d ${scripts_dir} ]; then
    echo "scripts directory does not exist, creating..."
    su - ${user} -c "mkdir -pv ${scripts_dir}"
    if [ $? -ne 0 ]; then
        echo "Something got wrong creating the tools directory."
        exit 2
    fi
else
    echo "scripts directory OK!"
fi

if [ -d ${pentest_dir} ] && [ ! -d ${tools_dir} ]; then
    echo "tools directory does not exist, creating..."
    su - ${user} -c "mkdir -pv ${tools_dir}"
    if [ $? -ne 0 ]; then
        echo "Something got wrong creating the tools directory."
        exit 2
    fi
else
    echo "tools directory OK!"
fi

if [ -d ${pentest_dir} ] && [ ! -d ${wordlists_dir} ]; then
    echo "wordlists directory does not exist, creating..."
    su - ${user} -c "mkdir -pv ${wordlists_dir}"
    if [ $? -ne 0 ]; then
        echo "Something got wrong creating the wordlists directory."
        exit 2
    fi
else
    echo "wordlists directory OK!"
fi

if [ -d ${tools_dir} ] && [ ! -d ${cloudflare_dir} ]; then
    echo "Cloudflare directory does not exist, creating..."
    su - ${user} -c "mkdir -pv ${cloudflare_dir}"
    if [ $? -ne 0 ]; then
        echo "Something got wrong creating the cloudflare directory."
        exit 2
    fi
else
    echo "cloudflare directory OK!"
fi
sleep 2

echo "Verifying if all necessaries binaries to reconnaissance there are in system..."
sleep 2
amass_bin=${tools_dir}/amass/amass
aquatone_bin=${tools_dir}/aquatone/aquatone
dirsearch_bin=${tools_dir}/dirsearch/dirsearch.py
dnsrecon_bin=${tools_dir}/dnsrecon/dnsrecon.py
dnssearch_bin=${tools_dir}/dnssearch/dnssearch
gobuster_bin=${tools_dir}/gobuster/gobuster
httprobe_bin=${tools_dir}/httprobe/httprobe
massdns_bin=${tools_dir}/massdns/bin/massdns
reconng_bin=${tools_dir}/recon-ng/recon-ng
sublist3r_bin=${tools_dir}/Sublist3r/sublist3r.py
theharvester_bin=${tools_dir}/theHarvester/theHarvester.py
wayback_bin=${tools_dir}/wayback/waybackurls
wordlist_bin=${wordlists_dir}/wordlistgen

if [ ! -s ${amass_bin} ]; then
    echo "Getting the amass binary..."
    su - ${user} -c "wget --quiet -c \"https://github.com/OWASP/Amass/releases/download/v3.4.2/amass_v3.4.2_linux_amd64.zip\" -O ${tools_dir}/amass.zip"
    if [ -s ${tools_dir}/amass.zip ]; then
        su - ${user} -c "unzip ${tools_dir}/amass.zip -d ${tools_dir}/"
        su - ${user} -c "mv ${tools_dir}/\"amass_v3.4.2_linux_amd64\" ${tools_dir}/amass"
        if [ -s ${amass_bin} ]; then
            echo "Amass binary OK!"
            su - ${user} -c "rm -rf ${tools_dir}/amass.zip"
            sleep 2
        else
            echo "Something got wrong with Amass..."
            exit 2
        fi
    else
        echo "Something got wrong during download..."
        exit 2
    fi
else
    echo "Amass OK!"
fi

if [ ! -s ${aquatone_bin} ]; then
    echo "Getting the Aquatone binary..."
    sleep 2
    if [ ! -d ${tools_dir}/aquatone ]; then
        su - ${user} -c "mkdir -pv ${tools_dir}/aquatone"
    fi
    su - ${user} -c "go get -u github.com/michenriksen/aquatone"
    if [ $? -eq 0 ] && [ -d ${tools_dir}/aquatone ]; then
        su - ${user} -c "mv ${user_home}/go/bin/aquatone ${tools_dir}/aquatone"
        if [ -s ${aquatone_bin} ]; then
            echo "Aquatone binary OK!"
            sleep 2
        else
            echo "Something got wrong with Aquatone move..."
            exit 2
        fi
    else
        echo "Something got wrong with Aquatone build..."
        exit 2
    fi
else
    echo "Aquatone OK!"
    sleep 2
fi

if [ ! -s ${dirsearch_bin} ]; then
    echo "Getting dirsearch python script..."
    sleep 2
    su - ${user} -c "git clone https://github.com/maurosoria/dirsearch.git ${tools_dir}/dirsearch"
    if [ -s ${dirsearch_bin} ]; then
        echo "Dirsearch python script OK!"
    else
        echo "Something got wrong with Dirsearch repository clone..."
        exit 2
    fi
else
    echo "Dirsearch OK!"
    sleep 2
fi

if [ ! -s ${dnsrecon_bin} ]; then
    echo "Getting the DNSRecon python script..."
    sleep 2
    su - ${user} -c "git clone https://github.com/darkoperator/dnsrecon.git ${tools_dir}/dnsrecon"
    pip3 install -r ${tools_dir}/dnsrecon/requirements.txt
    if [ $? -eq 0 ] && [ -s ${dnsrecon_bin} ]; then
        echo "DNSRecon python script OK!"
        sleep 2
    else
        echo "Something got wrong with DNSRecon..."
        exit 2
    fi
else
    echo "DNSRecon OK!"
    sleep 2
fi

if [ ! -s ${dnssearch_bin} ]; then
    echo "Getting DNSSearch..."
    sleep 2
    if [ ! -d ${tools_dir}/dnssearch ]; then
        su - ${user} -c "mkdir -pv ${tools_dir}/dnssearch"
    fi
    su - ${user} -c "go get -u github.com/evilsocket/dnssearch"
    if [ $? -eq 0 ] && [ -d ${tools_dir}/dnssearch ]; then
        su - ${user} -c "mv ${user_home}/go/bin/dnssearch ${tools_dir}/dnssearch/"
        if [ -s ${dnssearch_bin} ]; then
            echo "DNSSearch OK!"
            sleep 2
        else
            echo "Something got wrong with DNSSearch move..."
            exit 2
        fi
    else
        echo "Something got wrong with DNSSearch build..."
        exit 2
    fi
else
    echo "DNSSearch OK!"
    sleep 2
fi

if [ ! -s ${gobuster_bin} ]; then
    echo "Getting the Gobuster binary..."
    sleep 2
    if [ ! -d ${tools_dir}/gobuster ]; then
        su - ${user} -c "mkdir -pv ${tools_dir}/gobuster"
    fi
    su - ${user} -c "go get -u github.com/OJ/gobuster"
    if [ $? -eq 0 ] && [ -d ${tools_dir}/gobuster ]; then
        su - ${user} -c "mv ${user_home}/go/bin/gobuster ${tools_dir}/gobuster"
        if [ -s ${gobuster_bin} ]; then
            echo "Gobuster binary OK!"
            sleep 2
        else
            echo "Something got wrong with Gobuster move..."
            exit 2
        fi
    else
        echo "Something got wrong with Gobuster build..."
        exit 2
    fi
else
    echo "Gobuster OK!"
    sleep 2
fi

if [ ! -s ${httprobe_bin} ]; then
    echo "Getting the HttProbe binary..."
    sleep 2
    if [ ! -d ${tools_dir}/httprobe ]; then
        su - ${user} -c "mkdir -pv ${tools_dir}/httprobe"
    fi
    su - ${user} -c "go get -u github.com/tomnomnom/httprobe"
    if [ $? -eq 0 ] && [ -d ${tools_dir}/httprobe ]; then
        su - ${user} -c "mv ${user_home}/go/bin/httprobe ${tools_dir}/httprobe"
        if [ -s ${httprobe_bin} ]; then
            echo "HttProbe binary OK!"
            sleep 2
        else
            echo "Something got wrong with HttProbe move..."
            exit 2
        fi
    else
        echo "Something got wrong with HttProbe build..."
        exit 2
    fi
else
    echo "HttProbe OK!"
    sleep 2
fi

if [ ! -s ${massdns_bin} ]; then
    echo "Getting the massdns source code..."
    sleep 2
    su - ${user} -c "git clone https://github.com/blechschmidt/massdns.git ${tools_dir}/massdns"
    echo "Compiling massdns binary..."
    su - ${user} -c "cd ${tools_dir}/massdns ; make"
    if [ $? -eq 0 ] && [ -s ${massdns_bin} ]; then
        echo "MassDNS binary OK!"
        sleep 2
    else
        echo "Something got wrong with MassDNS..."
        exit 2
    fi
else
    echo "MassDNS OK!"
    sleep 2
fi

if [ ! -s ${reconng_bin} ]; then
    echo "Getting the recon-ng python script..."
    sleep 2
    su - ${user} -c "git clone https://github.com/lanmaster53/recon-ng.git ${tools_dir}/recon-ng"
    pip3 install -r ${tools_dir}/recon-ng/REQUIREMENTS
    if [ $? -eq 0 ] && [ -s ${reconng_bin} ]; then
        echo "recon-ng python script OK!"
        sleep 2
    else
        echo "Something got wrong with recon-ng..."
        exit 2
    fi
else
    echo "recon-ng OK!"
    sleep 2
fi

if [ ! -s ${sublist3r_bin} ]; then
    echo "Getting the Sublist3r python script..."
    sleep 2
    su - ${user} -c "git clone https://github.com/aboul3la/Sublist3r.git ${tools_dir}/Sublist3r"
    pip3 install -r ${tools_dir}/Sublist3r/requirements.txt
    if [ $? -eq 0 ] && [ -s ${sublist3r_bin} ]; then
        echo "Sublist3r OK!"
        sleep 2
    else
        echo "Something got wrong with Sublist3r..."
        exit 2
    fi
else
    echo "Sublist3r OK!"
    sleep 2
fi

if [ ! -s ${theharvester_bin} ]; then
    echo "Getting the theHarverster..."
    sleep 2
    su - ${user} -c "git clone https://github.com/laramies/theHarvester.git ${tools_dir}/theHarvester"
    if [[ ${distribution} == 'Ubuntu' ]] && [[ ${ubuntu_version} -le 18 ]] && [[ -n $(which python3.7) ]]; then
        su - ${user} -c "python3.7 -m pip install pip"
        su - ${user} -c "pip3.7 install -r ${tools_dir}/theHarvester/requirements.txt"
        su - ${user} -c "sed -i 's/python3/python3.7/' ${theharvester_bin}"
    else
        pip3 install -r ${tools_dir}/theHarvester/requirements.txt
    fi
    if [ $? -eq 0 ] && [ -s ${theharvester_bin} ]; then
        echo "theHavester OK!"
        sleep 2
    else
        echo "Something got wrong with theHarvester..."
        exit 2
    fi
else
    echo "theHarverster OK!"
    sleep 2
fi

if [ ! -s ${wayback_bin} ]; then
    echo "Getting the Waybackurls binary..."
    sleep 2
    if [ ! -d ${tools_dir}/wayback ]; then
        su - ${user} -c "mkdir -pv ${tools_dir}/wayback"
    fi
    su - ${user} -c "go get -u github.com/tomnomnom/waybackurls"
    if [ $? -eq 0 ] && [ -d ${tools_dir}/wayback ]; then
        su - ${user} -c "mv ${user_home}/go/bin/waybackurls ${tools_dir}/wayback"
        if [ -s ${wayback_bin} ]; then
            echo "Waybackurls OK!"
            sleep 2
        else
            echo "Something got wrong with Waybackurls move..."
            exit 2
        fi
    else
        echo "Something got wrong with Waybackurls build..."
        exit 2
    fi
else
    echo "Waybackurls OK!"
    sleep 2
fi

if [ ! -s ${wordlist_bin} ]; then
    echo "Getting the wordlistgen binary..."
    sleep 2
    su - ${user} -c "go get -u github.com/ameenmaali/wordlistgen"
    if [ $? -eq 0 ] && [ -d ${wordlist_dir} ]; then
        su - ${user} -c "mv ${user_home}/go/bin/wordlistgen ${wordlists_dir}"
        if [ -s ${wordlist_bin} ]; then
            echo "wordlistgen binary OK!"
            sleep 2
        else
            echo "Something got wrong with wordlistgen move..."
            exit 2
        fi
    else
        echo "Something got wrong with wordlistgen build..."
        exit 2
    fi
else
    echo "wordlistgen OK!"
    sleep 2
fi

echo "Verifying if all necessaries binaries to exploitation there are in system..."
sleep 2
jexboss_bin=${tools_dir}/jexboss/jexboss.py
searchsploit_bin=${exploits_dir}/searchsploit/searchsploit
wpscan_bin=${tools_dir}/wpscan/wpscan
ysoserial_bin=${tools_dir}/ysoserial/ysoserial.jar

if [ ! -s ${jexboss_bin} ]; then
    echo "Getting jexboss..."
    sleep 2
    su - ${user} -c "git clone https://github.com/joaomatosf/jexboss.git ${tools_dir}/jexboss"
    pip3 install -r ${tools_dir}/jexboss/requires.txt
    if [ $? -eq 0 ] && [ -s ${jexboss_bin} ]; then
        echo "Jexboss Python Script OK!"
        sleep 2
    else
        echo "Something got wrong with Jexboss..."
        exit 2
    fi
else
    echo "Jexboss Python Script OK!"
    sleep 2
fi

if [ ! -s ${searchsploit_bin} ]; then
    echo "Gettting searchsploit..."
    sleep 2
    su - ${user} -c "git clone https://github.com/offensive-security/exploitdb.git ${exploits_dir}/searchsploit"
    su - ${user} -c "sed -i \"s/\/opt\/exploitdb/${exploits_dir}\/searchsploit/\" ${exploits_dir}/searchsploit/.searchsploit_rc"
    echo "${searchsploit_bin}"
    if [ -s ${searchsploit_bin} ]; then
        echo "Searchsploit script OK"
        sleep 2
    else
        echo "Something got wrong with searchsploit"
        exit 2
    fi
else
    echo "Searchsploit script OK"
    sleep 2
fi

if [ ! -s ${wpscan_bin} ]; then
    echo "Getting wpscan..."
    sleep 2
    su - ${user} -c "mkdir -pv ${tools_dir}/wpscan"
    if [[ ${distribution} == 'Ubuntu' ]]; then
        gem install -n ${tools_dir}/wpscan wpscan
        chown ${user}:${user} ${wpscan_bin}
    else
        su - ${user} -c "gem install -n ${tools_dir}/wpscan wpscan"
    fi
    if [ $? -eq 0 ] && [ -s ${wpscan_bin} ]; then
        echo "WPScan binary OK"
        sleep 2
    else
        echo "Something got wrong with WPScan..."
        exit 2
    fi
else
    echo "WPScan binary OK"
    sleep 2
fi

if [ ! -s ${ysoserial_bin} ]; then
    echo "Getting ysoserial..."
    sleep 2
    su - ${user} -c "mkdir -pv ${tools_dir}/ysoserial"
    su - ${user} -c "wget --quiet -c https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar \
        -O ${tools_dir}/ysoserial/ysoserial.jar"
    if [ -s ${ysoserial_bin} ]; then
        echo "ysoserial jar file OK!"
        sleep 2
    else
        echo "Something got wrong with ysoserial..."
    fi
else
    echo "ysoserial jar file OK!"
    sleep 2
fi

echo "Getting some wordlists..."
sleep 2
if [ -d ${wordlists_dir} ]; then
    su - ${user} -c "mkdir -pv ${wordlists_dir}/dns"
    su - ${user} -c "mkdir -pv ${wordlists_dir}/web"
    su - ${user} -c "git clone https://github.com/danielmiessler/SecLists.git ${wordlists_dir}/SecLists"
    #This file breaks massdns and needs to be cleaned
    echo "Removing bad chars from Jhaddix's wordlist head..."
    su - ${user} -c "cp ${wordlists_dir}/SecLists/Discovery/DNS/dns-Jhaddix.txt ${wordlists_dir}/SecLists/Discovery/DNS/clean-jhaddix-dns.txt"
    su - ${user} -c "sed -i 1,14d ${wordlists_dir}/SecLists/Discovery/DNS/clean-jhaddix-dns.txt"
    echo "Cloning knock wordlist."
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/guelfoweb/knock/4.1/knockpy/wordlist/wordlist.txt -O ${wordlists_dir}/dns/knock-wl.txt"
    echo "Cloning subbrute wordlist."
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/TheRook/subbrute/master/names.txt -O ${wordlists_dir}/dns/subbrute-wl.txt"
    echo "Cloning dirbuster wordlists."
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/daviddias/node-dirbuster/master/lists/apache-user-enum-1.0.txt -O ${wordlists_dir}/web/apache-user-enum-1.0.txt"
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/daviddias/node-dirbuster/master/lists/apache-user-enum-2.0.txt -O ${wordlists_dir}/web/apache-user-enum-2.0.txt"
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/daviddias/node-dirbuster/master/lists/directory-list-1.0.txt -O ${wordlists_dir}/web/directory-list-1.0.txt"
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/daviddias/node-dirbuster/master/lists/directory-list-2.3-big.txt -O ${wordlists_dir}/web/directory-list-2.3-big.txt"
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/daviddias/node-dirbuster/master/lists/directory-list-2.3-medium.txt -O ${wordlists_dir}/web/directory-list-2.3-medium.txt"
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/daviddias/node-dirbuster/master/lists/directory-list-2.3-small.txt -O ${wordlists_dir}/web/directory-list-2.3-small.txt"
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/daviddias/node-dirbuster/master/lists/directory-list-lowercase-2.3-big.txt -O ${wordlists_dir}/web/directory-list-lowercase-2.3-big.txt"
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/daviddias/node-dirbuster/master/lists/directory-list-lowercase-2.3-medium.txt -O ${wordlists_dir}/web/directory-list-lowercase-2.3-medium.txt"
    su - ${user} -c "wget --quiet -c https://raw.githubusercontent.com/daviddias/node-dirbuster/master/lists/directory-list-lowercase-2.3-small.txt -O ${wordlists_dir}/web/directory-list-lowercase-2.3-small.txt"
fi

if [ -d ${exploits_dir} ]; then
    echo "Getting some exploits..."
    sleep 2
    su - ${user} -c "git clone https://github.com/pimps/CVE-2019-2725.git ${exploits_dir}/CVE-2019-2725"
    su - ${user} -c "git clone https://github.com/pimps/CVE-2017-1000486.git ${exploits_dir}/CVE-2017-1000486"
    su - ${user} -c "git clone https://github.com/pimps/CVE-2017-5645.git ${exploits_dir}/CVE-2017-5645"
    su - ${user} -c "wget --quiet -c https://github.com/pimps/ysoserial-modified/raw/master/target/ysoserial-modified.jar -O ${exploits_dir}/ysoserial-pimps.jar"
    su - ${user} -c "git clone https://github.com/pimps/CVE-2018-7600.git ${exploits_dir}/CVE-2018-7600"
    su - ${user} -c "git clone https://github.com/0xdea/exploits.git ${exploits_dir}/0xdea-exploits"
    echo "Downloading ysoserial.net and AspDotNetWrapper..."
    su - ${user} -c "wget --quiet -c https://github.com/pwntester/ysoserial.net/releases/download/v1.32/ysoserial-1.32.zip -O ${exploits_dir}/ysoserialdotnet-1.32.zip"
    su - ${user} -c "git clone https://github.com/NotSoSecure/Blacklist3r.git ${exploits_dir}/Blacklist3r"
    su - ${user} -c "wget --quiet -c https://github.com/NotSoSecure/Blacklist3r/releases/download/3.0/AspDotNetWrapper.zip -O ${exploits_dir}/Blacklist3r/AspDotNetWrapper.zip"
    su - ${user} -c "git clone https://github.com/worawit/MS17-010.git ${exploits_dir}/MS17-010"
fi

if [ -d ${tools_dir} ]; then
    echo "Getting some tools to enumerate"
    su - ${user} -c "git clone https://github.com/BlackDiverX/ssh-user-enumeration.git ${tools_dir}/ssh-user-enumeration"
    pip3 install -r ${tools_dir}/ssh-user-enumeration/requirements.txt
    su - ${user} -c "git clone https://github.com/galkan/crowbar.git ${tools_dir}/crowbar"
    pip2 install paramiko
    su - ${user} -c "git clone https://github.com/m0rtem/CloudFail.git ${tools_dir}/CloudFail"
    pip3 install -r ${tools_dir}/CloudFail/requirements.txt
    su - ${user} -c "git clone https://github.com/christophetd/CloudFlair.git ${tools_dir}/CloudFlair"
    pip3 install -r ${tools_dir}/CloudFlair/requirements.txt
    echo "To use cloudflair.py you need..."
    echo "Register an account (free) on https://censys.io/register"
    echo "Browse to https://censys.io/account/api, and set two environment variables with your API ID and API secret"
    echo "$ export CENSYS_API_ID=..."
    echo "$ export CENSYS_API_SECRET=..."
    su - ${user} -c "git clone https://github.com/HatBashBR/HatCloud.git ${tools_dir}/HatCloud"
    echo "Fix the url to acess the http://www.crimeflare.org:82/cfs.html#box"
    su - ${user} -c "sed -i '64s/crimeflare.us/crimeflare.org/' ${tools_dir}/HatCloud/hatcloud.rb"
    echo "Tools to GraphQL..."
    su - ${user} -c "https://github.com/doyensec/graph-ql.git ${tools_dir}/graph-ql"
    su - ${user} -c "https://github.com/swisskyrepo/GraphQLmap.git ${tools_dir}/GraphQLmap"
    echo "Tool do github..."
    su - ${user} -c "https://github.com/gwen001/github-search.git ${tools_dir}/github-search"
    su - ${user} -c "https://github.com/internetwache/GitTools.git ${tools_dir}/GitTools" 
fi

#echo "Creating some aliases and functions..."
#echo "nsesearch() {
#    if [ $# == 1 ]; then
#        find /usr/share/nmap/scripts/ | grep $1
#    fi
#}" >> ${user_home}/.bashrc


echo " "
echo "Remember to configure the postgresql before use metasploit!"
echo "Configure the OpenVAS too!"
echo "Configure the API Keys on theHarvester."
echo "Configure the modules on recon-ng!" 
echo "Use https://apis.guru/graphql-voyager/ to map the relationship between objects, schemas, etc of GraphQL!"
echo " "
echo "On your local machine, install:"
echo "  > Burp and your favorite extensions"
echo "  > Postman"
echo "  > Chrome/Firefox and your favorite extensions"
echo "    - Wappalyzer"
echo "    - Cookie Editor/Manager"
echo "    - FoxyProxy"
echo "    - Retire.js"
